;;; package -- utils
;;; Commentary:
;;; Code:

(defun +color-to-hsl (color)
  (let* ((values (x-color-values color))
         (r (/ (car values) 65535.0))
         (g (/ (cadr values) 65535.0))
         (b (/ (caddr values) 65535.0))
         (max-value (max r g b))
         (min-value (min r g b))
         (d (- max-value min-value))
         (l (/ (+ max-value min-value) 2))
         (s (cond ((or
                    (= l 0)
                    (= max-value min-value)) 0)
                  ((and
                    (> l 0)
                    (<= l 0.5))
                   (/ (- max-value min-value)
                      (* l 2)))
                  ((> l 0.5)
                   (/ (- max-value min-value)
                      (- 2 (* l 2))))))
         (h (% (round (+ (* (cond ((= max-value min-value) 0)
                                  ((= max-value r)
                                   (/ (- g b) d))
                                  ((= max-value g)
                                   (+ (/ (- b r) d) 2))
                                  ((= max-value b)
                                   (+ (/ (- r g) d) 4))) 60) 360) ) 360)))
    (list h s l)))

(defun +hsl-to-color (hsl)
  (let* ((h (car hsl))
         (s (cadr hsl))
         (l (caddr hsl))
         (c (* (- 1 (abs (- (* l 2) 1))) s))
         (t-h (/ h 60.0))
         (x (* c (- 1 (abs (- (+ (% (floor t-h) 2)
                                 (- t-h (floor t-h))) 1)))))
         (m (- l (/ c 2)))
         (rgb (mapcar (lambda(item)
                        (round (* (+ item m) 255)))
                      (cond ((<= t-h 1)
                             (list c x 0))
                            ((<= t-h 2)
                             (list x c 0))
                            ((<= t-h 3)
                             (list 0 c x))
                            ((<= t-h 4)
                             (list 0 x c))
                            ((<= t-h 5)
                             (list x 0 c))
                            ((<= t-h 6)
                             (list c 0 x)))))
         (r (car rgb))
         (g (cadr rgb))
         (b (caddr rgb)))
    (format "#%02x%02x%02x" r g b)))

(defun +color-to-hsv (color)
  (let* ((values (x-color-values color))
         (r (/ (car values) 65535.0))
         (g (/ (cadr values) 65535.0))
         (b (/ (caddr values) 65535.0))
         (max-value (max r g b))
         (min-value (min r g b))
         (d (- max-value min-value))
         (h (% (round (+ (* (cond ((= max-value min-value) 0)
                                  ((= max-value r)
                                   (/ (- g b) d))
                                  ((= max-value g)
                                   (+ (/ (- b r) d) 2))
                                  ((= max-value b)
                                   (+ (/ (- r g) d) 4))) 60) 360) ) 360))
         (s (if (= max-value 0) 0.0 (/ d max-value)))
         (v max-value))
    (list h s v)))

(defun +hsv-to-color (hsv)
  (let* ((h (car hsv))
         (s (cadr hsv))
         (v (caddr hsv))
         (i (% (round (/ h 60.0)) 6))
         (f (- (/ h 60.0) i))
         (p (* (- 1 s) v))
         (q (* (- 1 (* f s)) v))
         (o (* (- 1 (* (- 1 f) s) ) v))
         (rgb (mapcar (lambda(x)
                        (round (* x 255)))
                      (cond ((= i 0)
                             (list v o p))
                            ((= i 1)
                             (list q v p))
                            ((= i 2)
                             (list p v o))
                            ((= i 3)
                             (list p q v))
                            ((= i 4)
                             (list o p v))
                            ((= i 5)
                             (list v p q))) ))
         (r (car rgb))
         (g (cadr rgb))
         (b (caddr rgb)))
    ;; (message "%s %s %s %s %s" i q v f s)
    (format "#%02x%02x%02x" r g b)))

(defun +color-change-luminance (color scale)
  (let* ((hsl (+color-to-hsl color))
         (l  (+ (caddr hsl) scale))
         (new-hsl (list (car hsl)
                        (cadr hsl)
                        (cond ((> l 1) 1.0)
                              ((< l 0) 0.0)
                              (t l)))))
    (+hsl-to-color new-hsl)))

(defun +color-luminance (color)
  (caddr (+color-to-hsl color)))

(provide 'core/utils)
